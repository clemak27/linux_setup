version: "3.3"
services:

  syncthing:
    container_name: syncthing
    restart: unless-stopped
    image: syncthing/syncthing:${SYNCTHING_DOCKER_TAG}
    security_opt:
      - no-new-privileges:true
    ports:
      - 8384:8384
      - 22000:22000
      - 21027:21027/udp
    networks:
      - web
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_DIR}/syncthing/var:/var/syncthing
      - ${DATA_DIR}/syncthing/data:/data

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    network_mode: host
    environment:
      TZ: 'Europe/Vienna'
      WEBPASSWORD: ${PIHOLE_PW}
    volumes:
      - ${DATA_DIR}/pihole/etc-pihole/:/etc/pihole/
      - ${DATA_DIR}/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/
      - ${DATA_DIR}/pihole/lighttpd.external.conf:/etc/lighttpd/external.conf
    cap_add:
      - NET_ADMIN
    restart: unless-stopped

  traefik:
    image: traefik:${TRAEFIK_DOCKER_TAG}
    restart: always
    container_name: traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 222:222
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --api.debug=true
      - --log.level=INFO
      - --log.filePath=/traefik.log
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=web
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.ssh.address=:222
      - --certificatesResolvers.letsEncrypt.acme.email=clemak27@mailbox.org
      - --certificatesResolvers.letsEncrypt.acme.storage=/acme.json
      # - --certificatesResolvers.letsEncrypt.acme.httpChallenge.entryPoint=http
      - --certificatesResolvers.letsEncrypt.acme.dnsChallenge.provider=duckdns
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_DIR}/traefik/traefik.log:/traefik.log
      - ${DATA_DIR}/traefik/acme.json:/acme.json
    environment:
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
    networks:
      - web
    labels:
      - traefik.enable=true
      # HTTP-to-HTTPS Redirect
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      # HTTP Routers
      - traefik.http.routers.traefik-router.entrypoints=https
      - traefik.http.routers.traefik-router.rule=Host(`traefik.hemvist.duckdns.org`)
      - traefik.http.routers.traefik-router.tls=true
      - traefik.http.routers.traefik-router.tls.certresolver=letsEncrypt
      - traefik.http.routers.traefik-router.service=api@internal
      - traefik.http.routers.traefik-router.tls.domains[0].main=hemvist.duckdns.org
      - traefik.http.routers.traefik-router.tls.domains[0].sans=*.hemvist.duckdns.org
      # - traefik.http.routers.traefik-router.middlewares=traefik-auth

  gitea:
    image: gitea/gitea:${GITEA_DOCKER_TAG}
    container_name: gitea
    restart: always
    networks:
      - web
    volumes:
      - ${DATA_DIR}/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 3000:3000
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitea-router.entrypoints=https
      - traefik.http.routers.gitea-router.rule=Host(`gitea.hemvist.duckdns.org`)
      - traefik.http.routers.gitea-router.tls=true
      - traefik.http.routers.gitea-router.tls.certresolver=letsEncrypt
      # HTTP Services
      - traefik.http.routers.gitea-router.service=gitea-service
      - traefik.http.services.gitea-service.loadbalancer.server.port=3000
      ## SSH access
      - traefik.tcp.routers.gitea-ssh.rule=HostSNI(`*`)
      - traefik.tcp.routers.gitea-ssh.entrypoints=ssh
      - traefik.tcp.routers.gitea-ssh.service=gitea-ssh-service
      - traefik.tcp.services.gitea-ssh-service.loadbalancer.server.port=22

  miniflux:
    image: miniflux/miniflux:${MINIFLUX_DOCKER_TAG}
    container_name: miniflux
    depends_on:
      - miniflux_db
    networks:
      - web
      - backend
    ports:
      - 8081:8081
    environment:
      - DATABASE_URL=postgres://${MINIFLUX_DB_USER}:${MINIFLUX_DB_PASSWORD}@miniflux_db/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${MINIFLUX_ADMIN_USER}
      - ADMIN_PASSWORD=${MINIFLUX_ADMIN_PASSWORD}
      - BASE_URL=https://miniflux.hemvist.duckdns.org
      - LISTEN_ADDR=0.0.0.0:8081
      - POLLING_FREQUENCY=15
      - BATCH_SIZE=50
    labels:
      - traefik.enable=true
      - traefik.http.routers.miniflux-router.entrypoints=https
      - traefik.http.routers.miniflux-router.rule=Host(`miniflux.hemvist.duckdns.org`)
      - traefik.http.routers.miniflux-router.tls=true
      - traefik.http.routers.miniflux-router.tls.certresolver=letsEncrypt
      # HTTP Services
      - traefik.http.routers.miniflux-router.service=miniflux-service
      - traefik.http.services.miniflux-service.loadbalancer.server.port=8081

  miniflux_db:
    image: postgres:${POSTGRES_DOCKER_TAG}
    container_name: miniflux_db
    networks:
      - backend
    environment:
      - POSTGRES_USER=${MINIFLUX_DB_USER}
      - POSTGRES_PASSWORD=${MINIFLUX_DB_PASSWORD}
    volumes:
      - ${DATA_DIR}/miniflux:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "miniflux"]
      interval: 10s

  navidrome:
    image: deluan/navidrome:${NAVIDROME_DOCKER_TAG}
    container_name: navidrome
    networks:
      - web
    user: 1000:1000
    ports:
      - 4533:4533
    restart: unless-stopped
    environment:
      - ND_SPOTIFY_ID=${NAVIDROME_SPOTIFY_ID}
      - ND_SPOTIFY_SECRET=${NAVIDROME_SPOTIFY_SECRET}
      - ND_LASTFM_APIKEY=${NAVIDROME_LASTFM_APIKEY}
      - ND_LASTFM_SECRET=${NAVIDROME_LASTFM_SECRET}
      - ND_ENABLECOVERANIMATION=${NAVIDROME_ENABLECOVERANIMATION}
    volumes:
      - ${DATA_DIR}/navidrome/data:/data
      - ${DATA_DIR}/navidrome/music:/music:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.navidrome-router.entrypoints=https
      - traefik.http.routers.navidrome-router.rule=Host(`navidrome.hemvist.duckdns.org`)
      - traefik.http.routers.navidrome-router.tls=true
      - traefik.http.routers.navidrome-router.tls.certresolver=letsEncrypt
      # HTTP Services
      - traefik.http.routers.navidrome-router.service=navidrome-service
      - traefik.http.services.navidrome-service.loadbalancer.server.port=4533

  deemix:
    build:
      context: ${DATA_DIR}/deemix-docker
      dockerfile: Dockerfile
    container_name: deemix
    networks:
      - web
    ports:
      - 6595:6595
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - ARL=${DEEMIX_ARL}
    volumes:
      - ${DATA_DIR}/deemix/config:/config
      - ${DATA_DIR}/navidrome/music:/downloads

networks:
  web:
    external: true
  backend:
    external: false
