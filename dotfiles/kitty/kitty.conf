# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Font

font_family      JetBrainsMono Nerd Font
bold_font        auto
italic_font      auto
bold_italic_font auto

#: Font size (in pts)

font_size 10.0

#: Cursor customization

cursor #abb2bf
cursor_text_color background
cursor_shape block
cursor_blink_interval 0

#: Scrollback

scrollback_lines -1

#: Mouse

url_color #61afef
url_style curly
open_url_modifiers kitty_mod
copy_on_select clipboard
strip_trailing_spaces smart
terminal_select_modifiers shift
focus_follows_mouse no
default_pointer_shape arrow

#: Performance tuning

# repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

# input_delay 3

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

#: Terminal bell

enable_audio_bell no
bell_on_tab yes

#: Window layout

remember_window_size  no
initial_window_width  135c
initial_window_height 35c
active_border_color none
inactive_border_color #8a2be2
bell_border_color #ff5a00
inactive_text_alpha 0.5
# hide_window_decorations no
resize_draw_strategy scale
resize_in_steps no
confirm_os_window_close 2

#: Color scheme

foreground #abb2bf
background #000000
background_opacity 0.8
selection_foreground #000000
selection_background #abb2bf
# black
color0       #000000
color8       #555555
# red
color1       #e06c75
color9       #e06c75
# green
color2       #98c379
color10      #98c379
# yellow
color3       #e5c07b
color11      #e5c07b
# blue
color4       #61afef
color12      #61afef
# magenta
color5       #c678dd
color13      #c678dd
# cyan
color6       #56b6c2
color14      #56b6c2
# white
color7       #737373
color15      #abb2bf

#: Advanced

update_check_interval 0
clipboard_control write-clipboard write-primary

# Terminal issues with SSH
# When kitty is used to ssh into a remote that does not have its terminfo, various issues can occur. The solution is normally to copy over the terminfo. Kitty has an ssh kitten to automate exactly this.
# kitty +kitten ssh user@host
# You may want to set it as an alias for ssh.
# If for whatever reason you are unable to install the terminfo on the remote, you can try setting TERM to something that is more likely to be present. Note that this might disable some of the terminal's features.
# TERM='xterm-256color' ssh user@host



#: Keyboard shortcuts

kitty_mod ctrl+shift
clear_all_shortcuts yes
# You can have kitty remove all shortcut definition seen up to this point. Useful, for instance, to remove the default shortcuts.

#: Clipboard

map kitty_mod+c copy_to_clipboard
map kitty_mod+v  paste_from_clipboard
map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program

#: Scrolling

map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end

#: Window management

map kitty_mod+d launch --location=hsplit --cwd=current
map kitty_mod+alt+d launch --location=vsplit --cwd=current

map kitty_mod+e layout_action rotate

map kitty_mod+left neighboring_window left
map kitty_mod+right neighboring_window right
map kitty_mod+up neighboring_window up
map kitty_mod+down neighboring_window down

map kitty_mod+alt+up move_window up
map kitty_mod+alt+left move_window left
map kitty_mod+alt+right move_window right
map kitty_mod+alt+down move_window down

map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window

#: Layout management

enabled_layouts splits,stack
map kitty_mod+enter next_layout

#: Font sizes

map kitty_mod+plus     change_font_size all +2.0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0

#: Miscellaneous

map kitty_mod+f11    toggle_fullscreen
map kitty_mod+f10    toggle_maximized
map kitty_mod+u      kitten unicode_input
map kitty_mod+f2     edit_config_file
map kitty_mod+escape kitty_shell window
map kitty_mod+f9     send_text all clear_scrollback

#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: Search
map kitty_mod+f launch --stdin-source=@screen_scrollback --stdin-add-formatting nvim

#: OS specific tweaks

# macos_titlebar_color background
# macos_traditional_fullscreen no
# macos_show_window_title_in all
# macos_thicken_font 0.25
# macos_custom_beam_cursor no

# macos workaround https://github.com/kovidgoyal/kitty/issues/2600
# map alt+left send_text all \x1b\x62
# map alt+right send_text all \x1b\x66
# map cmd+c copy_to_clipboard
# map cmd+v  paste_from_clipboard

# search:
# scrollback_pager /usr/local/bin/nvim
# map kitty_mod+f show_scrollback
